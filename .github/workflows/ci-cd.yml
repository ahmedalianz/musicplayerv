name: React Native CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Lint and Test Job
  test:
    name: Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
          yarn add --dev @react-native-community/eslint-config

      - name: Run ESLint
        run: yarn lint || echo "Linting failed, but continuing..."

      # - name: Run tests
      #   run: yarn test:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # Android Build Job
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: cd android && chmod +x ./gradlew

      - name: Build Android APK
        run: cd android && ./gradlew assembleRelease

      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android/app/build/outputs/apk/release/app-release.apk

  # iOS Build Job (requires macOS runner)
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: npm ci

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0
          bundler-cache: true
          working-directory: ios

      - name: Install CocoaPods
        run: cd ios && pod install

      - name: Build iOS
        run: |
          cd ios
          xcodebuild \
            -workspace YourAppName.xcworkspace \
            -scheme YourAppName \
            -configuration Release \
            -destination 'generic/platform=iOS Simulator' \
            -archivePath YourAppName.xcarchive \
            archive

      - name: Upload iOS Archive
        uses: actions/upload-artifact@v4
        with:
          name: ios-archive
          path: ios/YourAppName.xcarchive

  # Deploy to Development (optional)
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk

      - name: Deploy to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: testers
          file: app-release.apk

  # Production Deploy
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk

      - name: Deploy to Google Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.yourcompany.yourapp
          releaseFiles: app-release.apk
          track: internal
          status: completed
